# -*- coding: utf-8 -*-
"""Big_Data_Final_GUI_24MDS014.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-NnIVoclBQr7wCtQLHgcdg2q-N-HfSXW

24MDS014_Housing_Price_Analysis
"""

import streamlit as st
st.set_page_config(page_title="Housing Data Analyzer", layout="wide")

import pandas as pd
import sqlite3
import numpy as np

# Try to import plotly, fall back to basic charts if not available
try:
    import plotly.express as px
    import plotly.graph_objects as go
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False
    st.warning("Using basic charts as Plotly is not available. For better visualizations, please install plotly.")

class HousingApp:
    def __init__(self):
        self.db_path = "housing_data.db"
        self.initialize_database()

    def plot_chart(self, data, chart_type, **kwargs):
        """Unified plotting function that handles both plotly and basic charts"""
        if PLOTLY_AVAILABLE:
            if chart_type == 'bar':
                fig = px.bar(data, **kwargs)
            elif chart_type == 'scatter':
                fig = px.scatter(data, **kwargs)
            elif chart_type == 'histogram':
                fig = px.histogram(data, **kwargs)
            elif chart_type == 'heatmap':
                fig = px.imshow(data, **kwargs)
            st.plotly_chart(fig)
        else:
            # Fallback to basic Streamlit charts
            if chart_type == 'bar':
                if 'x' in kwargs and 'y' in kwargs:
                    st.bar_chart(data.set_index(kwargs['x'])[kwargs['y']])
            elif chart_type == 'scatter':
                if 'x' in kwargs and 'y' in kwargs:
                    st.scatter_chart(data=data, x=kwargs['x'], y=kwargs['y'])
            elif chart_type == 'histogram':
                if 'x' in kwargs:
                    st.histogram_chart(data[kwargs['x']])
            elif chart_type == 'heatmap':
                st.dataframe(data.style.background_gradient(cmap='RdBu_r', axis=None))

    def initialize_database(self):
        """Initialize the SQLite database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS housing (
            price REAL, area REAL, bedrooms INTEGER, bathrooms INTEGER,
            stories INTEGER, mainroad TEXT, guestroom TEXT, basement TEXT,
            hotwaterheating TEXT, airconditioning TEXT, parking INTEGER,
            prefarea TEXT, furnishingstatus TEXT)''')
        conn.commit()
        conn.close()

    def upload_file(self):
        """Handle file upload and display preview"""
        uploaded_file = st.file_uploader("Upload a CSV file", type="csv")
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                df.columns = [col.strip().lower() for col in df.columns]

                # Save to database
                conn = sqlite3.connect(self.db_path)
                df.to_sql("housing", conn, if_exists="replace", index=False)
                conn.close()

                st.success("File uploaded successfully!")
                st.write("Preview of the data:")
                st.dataframe(df.head(10))
            except Exception as e:
                st.error(f"Error: {str(e)}")

    def get_data_from_db(self, query):
        """Execute SQL query and return DataFrame"""
        conn = sqlite3.connect(self.db_path)
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df

    def price_distribution(self):
        """Show price distribution analysis"""
        st.markdown("## Price Distribution Analysis")

        analysis_type = st.selectbox("Select analysis type", [
            'Average Price by Furnishing Status',
            'Price Distribution by Bedrooms',
            'Price vs Area Scatter Plot',
            'Price Range Distribution'
        ])

        if analysis_type == 'Average Price by Furnishing Status':
            df = self.get_data_from_db("""
                SELECT furnishingstatus, AVG(price) as avg_price
                FROM housing GROUP BY furnishingstatus""")

            if not df.empty:
                self.plot_chart(df, 'bar',
                              x='furnishingstatus', y='avg_price',
                              title='Average Price by Furnishing Status',
                              labels={'furnishingstatus': 'Furnishing Status',
                                     'avg_price': 'Average Price (‚Çπ)'})

        elif analysis_type == 'Price Distribution by Bedrooms':
            df = self.get_data_from_db("""
                SELECT bedrooms, AVG(price) as avg_price
                FROM housing GROUP BY bedrooms""")

            if not df.empty:
                self.plot_chart(df, 'bar',
                              x='bedrooms', y='avg_price',
                              title='Average Price by Number of Bedrooms',
                              labels={'bedrooms': 'Number of Bedrooms',
                                     'avg_price': 'Average Price (‚Çπ)'})

        elif analysis_type == 'Price vs Area Scatter Plot':
            df = self.get_data_from_db("SELECT price, area FROM housing")

            if not df.empty:
                self.plot_chart(df, 'scatter',
                              x='area', y='price',
                              title='Price vs Area',
                              labels={'area': 'Area (sq ft)',
                                     'price': 'Price (‚Çπ)'})

        elif analysis_type == 'Price Range Distribution':
            df = self.get_data_from_db("SELECT price FROM housing")

            if not df.empty:
                self.plot_chart(df, 'histogram',
                              x='price',
                              title='Price Distribution',
                              labels={'price': 'Price (‚Çπ)',
                                     'count': 'Number of Properties'})

    def correlation_analysis(self):
        """Show correlation analysis"""
        st.markdown("## Correlation Analysis")

        df = self.get_data_from_db("SELECT * FROM housing")

        if not df.empty:
            categorical_cols = ['mainroad', 'guestroom', 'basement',
                              'hotwaterheating', 'airconditioning',
                              'prefarea', 'furnishingstatus']

            for col in categorical_cols:
                if col in df.columns:
                    df[col] = pd.factorize(df[col])[0]

            corr = df.corr()
            
            self.plot_chart(corr, 'heatmap',
                          labels=dict(color="Correlation"),
                          x=corr.columns,
                          y=corr.columns,
                          color_continuous_scale='RdBu_r',
                          aspect='auto')

    def main(self):
        """Main application interface"""
        st.title("üè† Housing Data Analyzer")

        menu = ["Upload Data", "Price Analysis", "Correlation Analysis"]
        choice = st.sidebar.selectbox("Menu", menu)

        if choice == "Upload Data":
            self.upload_file()
        elif choice == "Price Analysis":
            self.price_distribution()
        elif choice == "Correlation Analysis":
            self.correlation_analysis()

if __name__ == '__main__':
    app = HousingApp()
    app.main()

