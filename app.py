# -*- coding: utf-8 -*-
"""Big_Data_Final_GUI_24MDS014.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-NnIVoclBQr7wCtQLHgcdg2q-N-HfSXW

24MDS014_Housing_Price_Analysis
"""

import pandas as pd
import sqlite3
import streamlit as st
import io
import base64

try:
    import matplotlib.pyplot as plt
    import seaborn as sns
    PLOTTING_AVAILABLE = True
except ImportError:
    PLOTTING_AVAILABLE = False
    st.warning("Warning: Plotting libraries not available. Some visualizations may be limited.")

class HousingApp:
    def __init__(self):
        self.db_path = "housing_data.db"
        self.initialize_database()

    def initialize_database(self):
        """Initialize the SQLite database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS housing (
            price REAL, area REAL, bedrooms INTEGER, bathrooms INTEGER,
            stories INTEGER, mainroad TEXT, guestroom TEXT, basement TEXT,
            hotwaterheating TEXT, airconditioning TEXT, parking INTEGER,
            prefarea TEXT, furnishingstatus TEXT)''')
        conn.commit()
        conn.close()

    def upload_file(self):
        """Handle file upload and display preview"""
        uploaded_file = st.file_uploader("Upload a CSV file", type="csv")
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                df.columns = [col.strip().lower() for col in df.columns]

                # Save to database
                conn = sqlite3.connect(self.db_path)
                df.to_sql("housing", conn, if_exists="replace", index=False)
                conn.close()

                st.success("File uploaded successfully!")
                st.write("Preview of the data:")
                st.dataframe(df.head(10))
            except Exception as e:
                st.error(f"Error: {str(e)}")

    def get_data_from_db(self, query):
        """Execute SQL query and return DataFrame"""
        conn = sqlite3.connect(self.db_path)
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df

    def price_distribution(self):
        """Show price distribution analysis"""
        st.markdown("## Price Distribution Analysis")

        analysis_type = st.selectbox("Select analysis type", [
            'Average Price by Furnishing Status',
            'Price Distribution by Bedrooms',
            'Price vs Area Scatter Plot',
            'Price Range Distribution'
        ])

        if not PLOTTING_AVAILABLE:
            st.error("Plotting libraries are not available. Please check your installation.")
            return

        if analysis_type == 'Average Price by Furnishing Status':
            df = self.get_data_from_db("""
                SELECT furnishingstatus, AVG(price) as avg_price
                FROM housing GROUP BY furnishingstatus""")

            if not df.empty:
                st.bar_chart(data=df.set_index('furnishingstatus')['avg_price'])
                st.write("Average Price by Furnishing Status")

        elif analysis_type == 'Price Distribution by Bedrooms':
            df = self.get_data_from_db("""
                SELECT bedrooms, AVG(price) as avg_price
                FROM housing GROUP BY bedrooms""")

            if not df.empty:
                st.bar_chart(data=df.set_index('bedrooms')['avg_price'])
                st.write("Average Price by Number of Bedrooms")

        elif analysis_type == 'Price vs Area Scatter Plot':
            df = self.get_data_from_db("SELECT price, area FROM housing")

            if not df.empty:
                st.scatter_chart(data=df, x='area', y='price')
                st.write("Price vs Area")

        elif analysis_type == 'Price Range Distribution':
            df = self.get_data_from_db("SELECT price FROM housing")

            if not df.empty:
                st.histogram_chart(df['price'])
                st.write("Price Distribution")

    def correlation_analysis(self):
        """Show correlation analysis"""
        st.markdown("## Correlation Analysis")

        if not PLOTTING_AVAILABLE:
            st.error("Plotting libraries are not available. Please check your installation.")
            return

        df = self.get_data_from_db("SELECT * FROM housing")

        if not df.empty:
            categorical_cols = ['mainroad', 'guestroom', 'basement',
                              'hotwaterheating', 'airconditioning',
                              'prefarea', 'furnishingstatus']

            for col in categorical_cols:
                if col in df.columns:
                    df[col] = pd.factorize(df[col])[0]

            corr = df.corr()
            st.write("Feature Correlation Matrix")
            st.dataframe(corr.style.background_gradient(cmap='coolwarm', axis=None))

    def main(self):
        """Main application interface"""
        st.set_page_config(page_title="Housing Data Analyzer", layout="wide")
        st.title("üè† Housing Data Analyzer")

        menu = ["Upload Data", "Price Analysis", "Correlation Analysis"]
        choice = st.sidebar.selectbox("Menu", menu)

        if choice == "Upload Data":
            self.upload_file()
        elif choice == "Price Analysis":
            self.price_distribution()
        elif choice == "Correlation Analysis":
            self.correlation_analysis()

if __name__ == '__main__':
    app = HousingApp()
    app.main()

